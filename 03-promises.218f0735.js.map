{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAyBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,aAAY,KACNH,EACFF,EAAQ,CAAEM,SAAAT,EAAUU,MAAAT,IAEpBG,EAAO,CAAEK,SAAAT,EAAUU,MAAAT,MAEpBA,MAEFU,MAAK,EAACF,SAAEA,EAAQC,MAAEA,MACjBE,EAAAf,GAASgB,OAAOC,QAAQ,uBAAqBL,QAAiBC,MAAW,CACrEK,QAAO,SAGZC,OAAM,EAACP,SAAEA,EAAQC,MAAEA,MAClBE,EAAAf,GAASgB,OAAOI,QAAQ,sBAAoBR,QAAiBC,MAAW,CACpEK,QAAO,SAxCJG,SAASC,cAAc,QAE/BC,iBAAiB,UAEtB,SAAgCC,GAC9BA,EAAMC,iBAEN,MAAMZ,MAAEA,EAAKa,KAAEA,EAAIC,OAAEA,GAAWH,EAAMI,OAChCC,EAAYC,SAASjB,EAAMkB,OAC3BC,EAAWF,SAASJ,EAAKK,QAMjC,SAAuBE,EAAOpB,EAAOa,GACnC,IAAK,IAAIQ,EAAI,EAAGA,GAAKD,EAAOC,GAAK,EAAG,CAElChC,EAAcgC,EADHrB,EAAQa,GAAQQ,EAAI,KALjCC,CAFqBL,SAASH,EAAOI,OAETF,EAAWG","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', createPromisesOnSubmit);\n\nfunction createPromisesOnSubmit(event) {\n  event.preventDefault();\n\n  const { delay, step, amount } = event.target;\n  const delayTime = parseInt(delay.value);\n  const stepTime = parseInt(step.value);\n  const amountNumber = parseInt(amount.value);\n\n  countPromises(amountNumber, delayTime, stepTime);\n}\n\nfunction countPromises(count, delay, step) {\n  for (let i = 1; i <= count; i += 1) {\n    let time = delay + step * (i - 1);\n    createPromise(i, time);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setInterval(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  })\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n        timeout: 2000,\n      });\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n        timeout: 2000,\n      });\n    });\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// refs = {\n// createPromiseBtn: document.querySelector('button'),\n// DELAY: document.querySelector('input[name=\"delay\"]').textContent,\n// STEP: document.querySelector('input[name=\"step\"]').textContent,\n// AMOUNT: document.querySelector('input[name=\"amount\"]').textContent\n\n// }\n\n// refs.createPromiseBtn.addEventListener('submit', createPromise)\n\n\n// function createPromise(position, delay) {\n//   let amountCounter = 0;\n//   delay = refs.DELAY;\n//   position = refs.AMOUNT;\n//   return new Promise(({resolve, reject}) => {\n//     setTimeout (() => {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     resolve(Notiflix.Notify.warning(`✅ Fulfilled promise ${position} in ${delay}ms`));\n//   } else {\n//     reject(Notiflix.Notify.warning(`❌ Rejected promise ${position} in ${delay}ms`));\n//   }\n// }, refs.DELAY);\n\n// .then(({ position, delay }) => {\n// return Notiflix.Notify.success(\n// `✅ Fulfilled promise ${position} in ${delay}ms`\n//  );\n// })\n\n\n// setInterval(() => {\n//   if (amountCounter === refs.AMOUNT) {\n//   clearInterval();\n//   reject(Notiflix.Notify.warning(`❌ Rejected promise ${position} in ${delay}ms`));\n//   return;}\n//   amountCounter += 1;\n//   resolve(Notiflix.Notify.warning(`✅ Fulfilled promise ${position} in ${delay}ms`));\n//   }, refs.STEP);\n\n// });\n// }\n\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position1","delay1","Promise","resolve","reject","shouldResolve","Math","random","setInterval","position","delay","then","$parcel$interopDefault","Notify","success","timeout","catch","failure","document","querySelector","addEventListener","event","preventDefault","step","amount","target","delayTime","parseInt","value","stepTime","count","i","$47d4ff9957288465$var$countPromises"],"version":3,"file":"03-promises.218f0735.js.map"}