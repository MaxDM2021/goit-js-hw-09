{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAuCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,aAAY,WACNH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YAEpBA,MA7CMQ,SAASC,cAAc,QAE/BC,iBAAiB,UAEtB,SAAgCC,GAC9BA,EAAMC,iBAEN,IAAgCC,EAAAF,EAAMG,OAA9Bd,EAAwBa,EAAxBb,MAAOe,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,OACfC,EAAYC,SAASlB,EAAMmB,OAC3BC,EAAWF,SAASH,EAAKI,QAMjC,SAAuBE,EAAOrB,EAAOe,GACnC,IAAK,IAAIO,EAAI,EAAGA,GAAKD,EAAOC,GAAK,EAAG,CAElCxB,EAAcwB,EADHtB,EAAQe,GAAQO,EAAI,IAGhCC,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAU0B,EAAKD,EAALxB,MACjB0B,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAANJ,EAAM,MAAK,CACvEK,QAAO,SAGZC,OAAM,SAAAP,G,IAAGzB,EAAQyB,EAARzB,SAAU0B,EAAKD,EAALxB,MAClB0B,EAAA9B,GAAS+B,OAAOK,QAAQ,sBAAuCH,OAAf9B,EAAS,QAAY8B,OAANJ,EAAM,MAAK,CACtEK,QAAO,UAfbG,CAFqBf,SAASF,EAAOG,OAETF,EAAWG,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', createPromisesOnSubmit);\n\nfunction createPromisesOnSubmit(event) {\n  event.preventDefault();\n\n  const { delay, step, amount } = event.target;\n  const delayTime = parseInt(delay.value);\n  const stepTime = parseInt(step.value);\n  const amountNumber = parseInt(amount.value);\n\n  countPromises(amountNumber, delayTime, stepTime);\n}\n\nfunction countPromises(count, delay, step) {\n  for (let i = 1; i <= count; i += 1) {\n    let time = delay + step * (i - 1);\n    createPromise(i, time)\n    \n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n      timeout: 2000,\n    });\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n      timeout: 2000,\n    });\n  });\n\n}\n\n\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setInterval(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  })\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// refs = {\n// createPromiseBtn: document.querySelector('button'),\n// DELAY: document.querySelector('input[name=\"delay\"]').textContent,\n// STEP: document.querySelector('input[name=\"step\"]').textContent,\n// AMOUNT: document.querySelector('input[name=\"amount\"]').textContent\n\n// }\n\n// refs.createPromiseBtn.addEventListener('submit', createPromise)\n\n\n// function createPromise(position, delay) {\n//   let amountCounter = 0;\n//   delay = refs.DELAY;\n//   position = refs.AMOUNT;\n//   return new Promise(({resolve, reject}) => {\n//     setTimeout (() => {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     resolve(Notiflix.Notify.warning(`✅ Fulfilled promise ${position} in ${delay}ms`));\n//   } else {\n//     reject(Notiflix.Notify.warning(`❌ Rejected promise ${position} in ${delay}ms`));\n//   }\n// }, refs.DELAY);\n\n// .then(({ position, delay }) => {\n// return Notiflix.Notify.success(\n// `✅ Fulfilled promise ${position} in ${delay}ms`\n//  );\n// })\n\n\n// setInterval(() => {\n//   if (amountCounter === refs.AMOUNT) {\n//   clearInterval();\n//   reject(Notiflix.Notify.warning(`❌ Rejected promise ${position} in ${delay}ms`));\n//   return;}\n//   amountCounter += 1;\n//   resolve(Notiflix.Notify.warning(`✅ Fulfilled promise ${position} in ${delay}ms`));\n//   }, refs.STEP);\n\n// });\n// }\n\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setInterval","document","querySelector","addEventListener","event","preventDefault","_target","target","step","amount","delayTime","parseInt","value","stepTime","count","i","then","param","_$delay","$parcel$interopDefault","Notify","success","concat","timeout","catch","failure","$ce04d3a99e08e73b$var$countPromises"],"version":3,"file":"03-promises.fdc2c791.js.map"}